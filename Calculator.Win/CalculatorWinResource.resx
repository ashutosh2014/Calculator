<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="value+" xml:space="preserve">
    <value>Add from current value
Press Shift+5 from keyborard!!</value>
  </data>
  <data name="valueC" xml:space="preserve">
    <value>Delete the one char from value
Press backsapce from keyborard!!</value>
  </data>
  <data name="valueCE" xml:space="preserve">
    <value>Clears the Entry
Press 'c' from keyborard!!</value>
  </data>
  <data name="valueAC" xml:space="preserve">
    <value>Clears the Whole expression
Press 'B' from keyborard!!</value>
  </data>
  <data name="value)" xml:space="preserve">
    <value>Add the Close bracket to expression with value written over it
Press ')' from keyborard!!</value>
  </data>
  <data name="valuecos" xml:space="preserve">
    <value>Evaluate cos(value)
Press Shift+5 from keyborard!!</value>
  </data>
  <data name="value/" xml:space="preserve">
    <value>Divide from current value 
Press '/' from keyborard!!</value>
  </data>
  <data name="valuelog" xml:space="preserve">
    <value>Evaluate Log10(value)
Press l from keyborard!!</value>
  </data>
  <data name="valueln" xml:space="preserve">
    <value>Evaluate ln(value)
Press L  from keyborard!!</value>
  </data>
  <data name="valueMC" xml:space="preserve">
    <value>Clear the Value stored in memory
Press Shift+3 from keyborard!!</value>
  </data>
  <data name="valueM-" xml:space="preserve">
    <value>Subtract the Value from memory and store it
Press Shift+2 from keyborard!!</value>
  </data>
  <data name="valueM+" xml:space="preserve">
    <value>Add Value to memory and store it
Press Shift+1 from keyborard!!</value>
  </data>
  <data name="valueMR" xml:space="preserve">
    <value>Read the value from memory
Press Shift+4 from keyborard!!</value>
  </data>
  <data name="valueMS" xml:space="preserve">
    <value>Store the value in memory
Press Shift+7 from keyborard!!</value>
  </data>
  <data name="value*" xml:space="preserve">
    <value>Multiply form current value
Press '*' from keyborard!!</value>
  </data>
  <data name="value(" xml:space="preserve">
    <value>Add the Open bracket to expression with value written over it
Press '(' from keyborard!!</value>
  </data>
  <data name="value%" xml:space="preserve">
    <value>Evaluate the Percentage
Press '%' from keyborard!!</value>
  </data>
  <data name="value." xml:space="preserve">
    <value>Add the Point to displayed value
Press '.' from keyborard!!</value>
  </data>
  <data name="value1/x" xml:space="preserve">
    <value>Evaluate the Reciprocal of value
Press 'Shift+/' from keyborard!!</value>
  </data>
  <data name="valueResult" xml:space="preserve">
    <value>Evaluate the Expression
Press Enter from keyborard!!</value>
  </data>
  <data name="value+/-" xml:space="preserve">
    <value>Changes the sign 
negative to postive or postive to negative
Press Shift+1 from keyborard!!</value>
  </data>
  <data name="valuesin" xml:space="preserve">
    <value>Evaluate sin(value)
Press 'S' from keyborard!!</value>
  </data>
  <data name="value-" xml:space="preserve">
    <value>Subtract from current value
Press '-' from keyborard!!</value>
  </data>
  <data name="valuetan" xml:space="preserve">
    <value>Evaluate tan(value)
Press 'T' from keyborard!!</value>
  </data>
  <data name="value8" xml:space="preserve">
    <value>Press 8 from Keyboard!!</value>
  </data>
  <data name="value5" xml:space="preserve">
    <value>Press 5 from Keyboard!!</value>
  </data>
  <data name="value4" xml:space="preserve">
    <value>Press 4 from Keyboard!!</value>
  </data>
  <data name="value9" xml:space="preserve">
    <value>Press 9 from Keyboard!!</value>
  </data>
  <data name="value1" xml:space="preserve">
    <value>Press 1 from Keyboard!!</value>
  </data>
  <data name="value7" xml:space="preserve">
    <value>Press 7 from Keyboard!!</value>
  </data>
  <data name="value6" xml:space="preserve">
    <value>Press 6 from Keyboard!!</value>
  </data>
  <data name="value3" xml:space="preserve">
    <value>Press 3 from Keyboard!!</value>
  </data>
  <data name="value2" xml:space="preserve">
    <value>Press 2 from Keyboard!!</value>
  </data>
  <data name="value0" xml:space="preserve">
    <value>Press 0 from Keyboard!!</value>
  </data>
  <data name="Exception" xml:space="preserve">
    <value>Exception is </value>
  </data>
  <data name="CloseBrace" xml:space="preserve">
    <value>)</value>
  </data>
  <data name="Cosine" xml:space="preserve">
    <value>cos</value>
  </data>
  <data name="Log10" xml:space="preserve">
    <value>log</value>
  </data>
  <data name="LogE" xml:space="preserve">
    <value>ln</value>
  </data>
  <data name="minusSign" xml:space="preserve">
    <value>-</value>
  </data>
  <data name="OpenBrace" xml:space="preserve">
    <value>(</value>
  </data>
  <data name="Point" xml:space="preserve">
    <value>.</value>
  </data>
  <data name="Sine" xml:space="preserve">
    <value>sin</value>
  </data>
  <data name="Tangent" xml:space="preserve">
    <value>tan</value>
  </data>
  <data name="value" xml:space="preserve">
    <value>value</value>
  </data>
  <data name="zero" xml:space="preserve">
    <value>0</value>
  </data>
  <data name="MinusMinus" xml:space="preserve">
    <value>--</value>
  </data>
  <data name="Plus" xml:space="preserve">
    <value>+</value>
  </data>
  <data name="PlusMinus" xml:space="preserve">
    <value>+-</value>
  </data>
  <data name="ZeroMinus" xml:space="preserve">
    <value>(0-</value>
  </data>
  <data name="Consolas" xml:space="preserve">
    <value>Consolas</value>
  </data>
  <data name="fntConsolas" xml:space="preserve">
    <value>fntConsolas</value>
  </data>
  <data name="fntConsolasBold" xml:space="preserve">
    <value>fntConsolasBold</value>
  </data>
</root>